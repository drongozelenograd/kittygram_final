name: Main Kittygram workflow

on:
  push:
    branches:
      - main

jobs:
  # Linter
  linter:
    name: Linter
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip        
        pip install -r ./requirements/requirements.lint.txt 
    
    - name: Test PEP8      
      run: python -m flake8 backend/
  
  # Tests
  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: linter
    services:
      postgres:
        image: postgres:13.10        
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432        
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip        
        pip install -r ./requirements/requirements.txt

    - name: Simple Test
      env:
        POSTGRES_USER: django_user
        POSTGRES_PASSWORD: django_password
        POSTGRES_DB: django_db        
        DB_HOST: 127.0.0.1
        DB_PORT: 5432
      run: |
        cd backend/
        python manage.py test
  
  # Push backend Docker image to DockerHub
  build_backend_and_push_to_docker_hub:
    name: Push backend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo        
        uses: actions/checkout@v3
      - name: Set up Docker Buildx        
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker        
        uses: docker/login-action@v2        
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub        
        uses: docker/build-push-action@v4
        with:          
          context: ./backend/          
          push: true          
          tags: drongozelenograd/kittygram_backend:latest
  
  # Frontend tests
  frontend_tests:
    name: Frontend tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up nodeJS      
      uses: actions/setup-node@v3
      with:        
        node-version: 18

    - name: Install dependencies      
      run: |
        cd frontend/
        npm ci

    - name: Test frontend      
      run: |
        cd frontend/
        npm run test

  # Push frontend Docker image to DockerHub
  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: drongozelenograd/kittygram_frontend:latest
  
  # Push gateway Docker image to DockerHub
  build_gateway_and_push_to_docker_hub:
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true          
          tags: drongozelenograd/kittygram_gateway:latest

  # Deploy to production server
  deploy:
    name: Deploy to production
    runs-on: ubuntu-latest
    needs:      
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3    
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master    
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "kittygram"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}        
        script: |
          cd kittygram          
          sudo docker compose -f docker-compose.production.yml pull          
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d          
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
          sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/          
  
  # Integration tests
  integration_tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip        
        pip install -r ./requirements/requirements.txt

    - name: Main Test    
      run: pytest
  
  # Send message to Telegram 
  send_message:
    name: Send message to Telegram
    runs-on: ubuntu-latest
    needs: integration_tests
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой Kittygram успешно выполнен!